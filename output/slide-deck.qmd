---
title:       "Version control for reproducible research and collaboration"
subtitle:    "An overview of git + Github in scientific workflows"
date:        2023-06-09
date-format: long
author:      |
  Daniel Morillo, Ph.D.\
  [![](../www/GitHub-Logo.png){height="50"}](https://github.com/DaniMori/)
  [![](../www/orcid.png){height="50"}](https://orcid.org/0000-0003-3021-3878)
institute:   |
  Network-based Biomedical Research Consortium (Mental Health)\
  [![](../www/cibersam.png){height="80"}](https://www.cibersam.es/)
format:
  revealjs:
    slide-number:     false
    fig-cap-location: bottom
    transition:       none
    incremental:      false
    auto-stretch:     false
    self-contained:   true
    theme:            ../www/styles.css
    view-distance:    3
    template-partials:
      - ../www/title-slide.html
knitr: true
---

# Intro: Why version control?

## Problem:

![](../www/phd_versions.png){fig-align="center" height="520"}

::: aside
*notFinal.doc* by [Piled Higher and
Deeper](https://phdcomics.com/comics/archive.php?comicid=1531)
:::

::: notes
What I'm going to talk about in this seminar is the problem illustrated in this
comic strip. Not the frustration of having to go through several rounds of
reviews, of course, but how to manage and keep track of all the changes and
versions his thesis has gone all throughout.

Have you ever encountered yourself with such a problem?

Some of the most common problems one finds when trying to manage the different
versions of their work are...
:::

## Problem:

-   Which is the most updated version?

. . .

-   When did this code / draft / protocol / etc. change, and why?

. . .

-   Does this version have the last changes?

. . .

-   Did I take into account the reviews of all co-authors?

. . .

-   other ones... ?

::: notes
For example, you may be asked by a colleague, reviewer, or an interested reader
about your analysis... what was the code you wrote and used, exactly? Also, what
was the state of your environment (R packages, other dependencies) at the time
you generated your results?

(NEXT)

You may also have changed your code at a certain point. Even if you are sure
about which version is used for what, do you know exactly why there are
different versions at all?

Are they all useful, or some of them are just backup copies?

How did you come up with this version, and why? Did a previous one not work, or
was it wrong for some reason?

(NEXT)

After several rounds of reviews, are you sure you are working on the latest
version?

(NEXT)

And, have you integrated the changes and suggestions of all your co-authors?

(NEXT)

What other problems have you found along in your research daily work?

(LET TIME FOR DEBATE)
:::

# Solutions

::: notes
So, there are several ways of sorting this out.
:::

## Manual versioning {.smaller .nonincremental}

::: columns
::: {.column width="60%"}
![](../www/switch_to_vc.jpg){fig-align="center" height="100%"}
:::

::: {.column width="40%"}
</br>

::: fragment
-   Shared files

    -   cloud service

    -   network units
:::

</br>

::: fragment
-   File naming conventions
:::
:::
:::

::: aside
*Git, SVN or ...?* by
[CommitStrip](https://www.commitstrip.com/en/2013/11/05/git-svn-ou/)
:::

::: notes
The most obvious one is manual versioning, which most of us are probably used
to.

(NEXT)

To allow sharing files, we can store them in cloud services or network units...

(NEXT)

and implement some file naming conventions to keep track of the different
versions. Unlike this guy (picture), we can e.g. preffix the naem with a date,
suffix with a version number, or with the initials of the last reviewer...

Do you use any service or system to share files, and/or file naming conventions?

(LET TIME FOR DEBATE)
:::

## Manual versioning {.nonincremental}

</br>

-   Errors

. . .

-   Work lost

. . .

-   Duplicated effort

. . .

-   other problems... ?

::: notes
We probably have suffered from some problems with manual versioning, like
errors. The most obvious one, accidentally deleting a file and having to start
again at a previous point.

(NEXT)

But not only. It may happen that we just don't find a previous version, so we
may need to redo some of the work.

(NEXT)

Or worse than that: We do a lot of work, e.g. writing or updating a script, only
to find out that a colleague had done the same (or something similar) before.

(NEXT)

What other problemas have you found when using a manual versioning system?

(LET TIME FOR DEBATE)
:::

## Version control

![](../www/version-control-systems.png){fig-align="center"}

::: aside
From
[Programmerblog.net](https://programmerblog.net/what-is-version-control-system/)
:::

::: notes
Well, for these reasons, version control systems were created. Thre are many
different systems, but we are going to focus here on git, because it is open
source, very popular among the research community, and also because it allows to
using Github as a centralized server, which has many nice features that we will
see later on.

Now, going back to my initial question, the point would be:
:::

# Why version control?

::: notes
"Should I use it?"

Let's see the features of version control systems, and why they are useful.
:::

## Collaboration

![](../www/git-collaboration.png){fig-align="center" height="520"}

::: aside
From [cPanel
blog](https://blog.cpanel.com/git-version-control-series-what-is-git/)
:::

::: notes
First of all: collaboration, it's most useful feature. Nowadays every research
project is collaborative, in one way or another. Being able to collaborate
seamlessly is something every system should allow.

By using a centralized version control system, everyone in a project can share,
contribute, and reuse the work of one another.
:::

## History of changes

::: columns
::: {.column width="80%"}
![](../www/Nobel-Prize-Timeline.png){fig-align="center" height="100%"}
:::

::: {.column width="20%"}
::: fragment
-   What
:::

::: fragment
-   When
:::

::: fragment
-   Why
:::

::: fragment
-   Who
:::
:::
:::

::: aside
From [Office Timeline](https://www.officetimeline.com/blog/nobel-prize-timeline)
:::

::: notes
This is an example of a timeline, with specific events at a certain point in
time. This is the analogy you need to keep in mind to understand what a version
control system is.

In essence, it is a history of the changes in a project (or a "repository", in
the version control jargon).

With this timeline, we have the information about what has changed. There are
even ways in which you can "version control" your environment, so that someone
else knows for example which R packages and which versions they need to use.

(NEXT)

but also when (for example, seeing the timeline we may know what results are
affected if an analysis script has changed, and whether they need to be
updated),... why (this can help provide a lot of knowledge),

(NEXT)

and by whom (which is important because we can gather more information about why
a change was made, if necessary).

Also, attribution is always granted. This can provide, in my opinion, a serious
breakthrough when dealing with ghost authorship.
:::

## History of changes...

... can be a life saver

![](../www/vc-Lucas.jpg){fig-align="center" height="450"}

::: aside
From [Daniel Korn](https://danielkorn.io/post/git-restore/)
:::

::: notes
Also, this history is always available (no matter what). So it is a backup
system that protects us against dramatic errors that make us lose the work done.
:::

## History of changes:

Fear not "moving forward"!

![](../www/documentation.png){fig-align="center" height="450"}

::: aside
From
[Medium.com](https://medium.com/@lanceharvieruntime/version-control-why-do-we-need-it-1681f4888cec)
:::

::: notes
What does this mean? We don't need to be held back to make changes by fear of
deleting something important.

Also, we don't need to be documenting our "previous versions" in obscure ways,
as this poor guy is doing. This implies even updating the environment.

However, if we are not sure about our changes, we can still make progress
without fear thanks to another important feature...
:::

## Parallel histories

![](../www/back-to-the-future-ii.jpg){fig-align="center" height="520"}

::: aside
From
[Cinemaclock](https://www.cinemaclock.com/movies/back-to-the-future-part-ii-1989)
:::

::: notes
Do you recognize this film?

(PAUSE AND EXPLAIN)

This is exactly what "branching" does: Creating a "parallel history".
:::

## Parallel histories

Branching:

::: columns
::: {.column width="60%"}
![](../www/git-branch.PNG){.absolute top="140" width="65%"}
:::

::: {.column width="40%"}
::: fragment
-   Experiment

<br>
:::

::: fragment
-   Review

<br>
:::

::: fragment
-   Integrate / dismiss
:::
:::
:::

::: aside
From
[dev.to](https://dev.to/vatsalyagoel/rewriting-git-history-being-opinionated-about-git-2bn1)
:::

::: notes
The ability to "suggest changes" in parallel...

(NEXT)

or do "experiments", without affecting the main outcome of our project, is a
very prominent feature of VC.

This way, we can "change things" without the fear of conflicting with what is
already done.

That's how far the "Back to the future" metaphor goes though.

(NEXT)

Because then, if we are satisfied with the new changes, and maybe gather enough
consensus, ...
:::

## Parallel histories

Merging a branch:

<br>

![](../www/git-tree.png){fig-align="center" height="100%"}

::: aside
From
[dev.to](https://dev.to/vatsalyagoel/rewriting-git-history-being-opinionated-about-git-2bn1)
:::

::: notes
we can merge these new changes with the main history, so the changes go to the
final output.

Or of course, we could just abandon that branch, if we thing we have come to a
dead end, or we are not satisfied with the result.

However, one thing is very important, whether we merge our parallel to the main
history or not: Nothing is ever lost (unless we want it to, of course).
:::

## Reproducibility

::: columns
::: {.column width="50%"}
![](../www/the_difference.png){fig-align="center" height="520"}
:::

::: {.column width="50%"}
<br>

::: fragment
-   ... of results

<br>
:::

::: fragment
-   Replicability

<br>
:::
:::
:::

::: aside
From [XKCD](https://xkcd.com/242/)
:::

::: notes
And this is very important in research, right?

(NEXT)

Because our results will of course be reproducible: We can also re-run our code
(or our whole project, for that matter) and see if we arrive at the same results
we have reported.

(NEXT)

Moreover, replicability is easy: We "only" need the same code and a new dataset.

Well, these two are not 100% true: We need the data (same or new), and the code,
but (those who work in R will be familiar with this), what else do we need?
:::

## Reproducibility

![](../www/r-packages.png){fig-align="center" height="520"}

::: aside
From [javapoint](https://www.javatpoint.com/list-of-r-packages)
:::

::: notes
The environment. For strict reproducibility we need the same version of our
software. In the case of R, python, or other statistical computing languages, we
need to make sure we also have the correct versions of all the packages.

This is not a feature of version control per se, but it helps with it. In the
case of R (and Python for that matter), there are helper packages allow to
record the state of the environment (packages and their version) in a file
within the version control system, which can then be shared and reproduced by
collaborators (or even yourself in a new machine!) You can't imagine how much of
a time-saver (and "error-saver") is this.

So, version control improves reproducibility, and replicability. But there is
something beyond that, which is becoming a trend nowadays: Transparency.
:::

## Transparency

> When most people think about design, they often think of it as just the final
> output: the screens. What they don't see, or aren't aware of, is all of the
> work that goes into identifying and articulating the problem, gathering data,
> planning, consensus-building, decision-making, and conversations with
> stakeholders that ultimately lead to that final output. All of these things
> make up the design process.\

---[Josh Brewer \@
Abstract.com](https://www.abstract.com/blog/version-history-version-control)

::: notes
Have a look at this quote.

It is From a web design blog; it is not about scientific research, but I can't
stress enough how true it is when we apply it to scientific research.

Let me read it, "translating" it to "scientific jargon":

When most people think about science, they often think of it as just the final
output: the paper. What they don't see, or aren't aware of, is all of the work
that goes into identifying and articulating the problem, gathering data,
planning, consensus-building, decision-making, conversations with stakeholders,
writing data analysis pipelines, protocols, grant applications, ethical
clearance applications, or manuscript drafts, reviewing those drafts, etc...,
that ultimately lead to that final output. All of these things make up the
research process.

This is, in my opinion, the most important feature of version control: Not just
reproducibility (of results only), but transparency of workflows.
:::

# Why not version control...?

::: notes
So we see that version control solves all and every problem we may have with
managing our research projects, and it also allows us to have a completely
reproducible and transparent workflow.

Why is not everybody in academia using it?
:::

## Design

(for software engineering)

![](../www/bryan.jpg){fig-align="center" height="450"}

::: aside
From [LOLPics.com](https://lolpics.com/)
:::

::: notes
The main reason is this: Version control was built by SW engineers, for SW
engineers... and we all know some IT people, we know they are "special"
somehow... :)

They open ugly black terminal windows, run a lot of alien, esoteric commands,
and then they make memes like this, mocking the rest of us mortals for not
understanding what they do!

Of course one does not need to learn commands, because git (and all version
control systems, for that matter)...
:::

## Design

GUIs can be a great help

![](../www/git-gui.jpg){fig-align="center" height="400"}

::: aside
By [Lulu Ilmaknun
Qurotaini](https://medium.com/@lulu.ilmaknun.q/kompilasi-meme-git-e2fe49c6e33e)
:::

::: notes
have graphical user interfaces to make our life simpler. Later on we will see
how git integrates with Rstudio, which has a very simple interface for git, but
there are other ones, that allow us to do many more things easily, without
having to learn commands.

Even though...
:::

## Design

Slow learning curve

![](../www/understand-git.jpg){fig-align="center" height="100%"}

::: aside
By [Lulu Ilmaknun
Qurotaini](https://medium.com/@lulu.ilmaknun.q/kompilasi-meme-git-e2fe49c6e33e)
:::

::: notes
learning to use these version control systems is difficult. And it takes time.
This implies there will be errors, moreover in the beginning, and issues that
will be difficult to solve.

To give you an estimate, I would say that the investment starts paying off
around the third article done in version control.
:::

## File types

Binary:

::: columns
::: {.column width="43%"}
![](../www/docx-example.png){.absolute top="140" height="510"}
:::

::: {.column width="57%"}
```{embed, file = "../www/docx-example.txt"}
```
:::
:::

::: notes
Another problem is that we are used to working with applications that store the
information as binary files. For example, this is how a "Word file" looks like;
you can try to open one in a notepad application and see what it looks like.
:::

## File types

Text-based:

<br>

::: columns
::: {.column align="center" width="25%"}
:::

::: {.column align="center" width="50%"}
```{embed, file = "../www/textfile-example.md"}
```
:::
:::

::: notes
Version control works best with "text files". These are "human-readable", and
are separated in "lines of text".
:::

## File types

Tracking changes:

![](../www/commit-changes-example.png){fig-align="center" height="500"}

::: notes
In this example you can easily see why: The system identifies which lines have
changed, and marks them as "added" or "deleted".

For this reason, it is always better to use text-based formats. Otherwise, git
needs to mark the whole file as "changed" when a binary file is updated. The
"state-of-the-art" formats for scientific writing nowadays allow so-called
literate computing, and can translate easily to word, PDF, LaTeX, etc.
:::

## File types

"Rich Text Format" file type:

::: columns
::: column
![](../www/rtf-file.png){fig-align="center" height="500"}
:::

::: column
![](../www/commit-changes-RTF.png){fig-align="center" height="500"}
:::
:::

::: notes
However, if you "insisted" on using Word for drafting manuscripts, a good
alternative could be to use "RTF" files. These store information in text format,
although with a lot of code and not very intelligible format.

Here you see an example of a very simple commit, that only corrects an erratum,
"manucript" by "manuscript", so it justs adds a single character, an "s". But
you can see that it generates a lot of changes in the file. However, this is
better than nothing.
:::

## Oversharing

![](../www/oversharing.png){fig-align="center" height="520"}

::: aside
From [Digital information
world](https://www.digitalinformationworld.com/2015/10/infographic-oversharing-your-biggest-security-risk-could-be-you.html)
:::

::: notes
Another important source of concern is the possibility to "version" sensitive
information accidentally. Because a repository is usually shared among
colleagues, and eventually can be made public to share it with the whole
research community, those data should always be kept out of repositories.

Version control has the risk of exposing passwords or research participant data,
due to human errors. But these risks are mitigated by having a good repository
structure and file access policies.

"Ignore files", relative paths to external folders, and private repositories are
the tools to avoid these errors. And if they happen, commits can always be
deleted from the history.
:::

## Time required

![](../www/meaningful_message.png){fig-align="center" height="520"}

::: aside
From [Work Chronicles](https://workchronicles.com/commit-messages/)
:::

::: notes
Lastly, using version control is time-consuming. You need to dedicate effort to
additional things, aside from your "significant work". One of them is
documenting "why" you do the changes you do...
:::

## Time required

![](../www/git-fire.jpg){fig-align="center" height="520"}

::: aside
From
[Funnyjokes.co.in](https://funnyjokes.co.in/in-case-of-fire-funny-jokes-funny-images/)
:::

::: notes
...and another one is to actually creating an iteration ("committing" the
changes in the git jargon), and synchronizing it with the repository ("pushing
to the repo").

Also, creating branches and merging them is time consuming, which leads us to
the last problem: conflicts.
:::

## Conflicts

<br>

![](../www/merge-conflict.png){fig-align="center" width="100%"}

::: aside
From
[Neoscience.org](https://www.neonscience.org/resources/learning-hub/tutorials/git-setup-remote)
:::

::: notes
These conflicts occur (usually) when two people edit the same line of the same
file in parallel. When that happens, one needs to resolve the conflicts by
choosing one version, the other, or a mix of both.
:::

## Conflicts

![](../www/conflicts-headache.jpg){fig-align="center" height="520"}

::: aside
By [TANAYKAMATH](https://imgflip.com/i/471xbc)
:::

::: notes
But more than time-consuming (which they are) merge conflicts are scary and
annoying. But they can be avoided by having a clear understanding of what one is
doing, and having good versioning policies, for example creating explicit rules
for branching and committing.

So after all these, one may wonder if it is worth using version control systems.
:::

## Why not version control?

![](../www/marshmallow.jpg){fig-align="center" height="520"}

::: aside
From [Dr.
Deb](https://drdeborahserani.blogspot.com/2009/09/marshmallow-test.html)
:::

::: notes
In my view (and that of people who advocate for this), version control provides
"delayed gratification". It will take more time to control your versions this
way, and you will need to invest in learning it, but eventually it will pay off.

To give you an estimate, I would say that around the third article done in
version control you start feeling the gratification.
:::

# How to...

::: notes
So, how does version control actually work?

We are going to see an example, using git.

(GO TO RSTUDIO, EXAMPLE OF STAGE, COMMIT)

(SHOW HISTORY)

We can continue working until we are done, or we want to have the certainty that
we have a backup copy in the Github server.

(EXAMPLE OF PUSH TO SERVER)

Now the commit is in the Github repository. We can go to Github and see these
changes. Here we have a "pull request", that is a request to "merge" a certain
branch to the "main" history. In this "pull request" we see a history of changes
and, very conveniently, we can review the changes in this branch, compared to
its base branch (the one we want to merge to). We can add comments, request
changes, etc.
:::

## In summary

<br>

![](../www/flowchart.png){fig-align="center" height="420"}

::: aside
From [Soundsoftware.co.uk](http://soundsoftware.ac.uk/why-version-control)
:::

::: notes
Version control can save much time and effort, when one has a minimum knowledge
of how to use it.

So...
:::

##  {.center}

::: {#title-slide .center}
### Thanks!

<br>

### Tack så mycket!

<br>

### ¡Gracias!
:::

::: notes
Why not use it?
:::
